```{python}
import pandas as pd 

df = pd.read_csv('../data/appartments.csv')

df.head()
```

```{python}
print("collumns:",df.columns)
print("shape:",df.shape)
print("missing values \n",df.isnull().sum())
```

```{python}

df_unique = df.drop_duplicates(subset=['link'], keep='first')
print("collumns:",df_unique.columns)
print("shape:",df_unique.shape)
print("missing values \n", df_unique.isnull().sum())

```

```{python}
df_region_count = df_unique[["region", "link"]].groupby("region", as_index= False).count()
df_region_count.columns = ["Region Name", "Count"]
df_region_count
```
```{python}
df_region_mean_price = df_unique[["region", "price_pcm"]].groupby("region", as_index= False).mean().round(2)
df_region_mean_price.columns = ["Region Name", "Average Price (pcm)"]
df_region_mean_price
```
```{python}
df_type_count = df_unique[["type", "link"]].groupby("type", as_index= False).count().sort_values(["link"], ascending= False).reset_index(drop=True).head(6)
top_6_types = list(df_type_count["type"].values)
df_type_count.columns = ["Property Type", "Count"]
df_type_count
```
```{python}
df_type_mean_price = df_unique[["type", "price_pcm"]].groupby("type", as_index= False).mean().round(2).sort_values(["price_pcm"]).reset_index(drop=True)
df_type_mean_price = df_type_mean_price[df_type_mean_price["type"].isin(top_6_types)].reset_index(drop= True)
df_type_mean_price.columns = ["Property Type", "Average Price (pcm)"]
df_type_mean_price
```

```{python}
df_bedrooms_count = df_unique[["bedrooms", "link"]].groupby("bedrooms", as_index= False).count().sort_values(["bedrooms"])
df_bedrooms_count.columns = ["Number of Bedrooms", "Count"]
df_bedrooms_count
```
```{python}
df_bedrooms_mean_price = df_unique[["bedrooms", "price_pcm"]].groupby("bedrooms", as_index= False).mean().round(2).sort_values(["bedrooms"])
df_bedrooms_mean_price.columns = ["Number of Bedrooms", "Average Price (pcm)"]
df_bedrooms_mean_price
```
```{python}
df_ppb = df_unique.copy()
df_ppb["price_per_bedroom"] = (df_ppb["price_pcm"]/df_ppb["bedrooms"]).round(2)
df_ppb = df_ppb[["bedrooms", "price_per_bedroom"]].groupby("bedrooms", as_index= False).mean().round(2).sort_values(["bedrooms"])
df_ppb.columns = ["Number of Bedrooms", "Average Price per Bedroom (pcm)"]
df_ppb
```
```{python}
df_bedrooms_combined = pd.merge(df_bedrooms_mean_price, df_ppb, "inner", on = ["Number of Bedrooms"])
df_studio = df_type_mean_price[df_type_mean_price["Property Type"] == "Studio"]
df_studio.columns = ["Number of Bedrooms", "Average Price (pcm)"]
df_studio = df_studio.copy()
df_studio["Average Price per Bedroom (pcm)"] = df_studio["Average Price (pcm)"]
df_bedrooms_combined["Number of Bedrooms"] = df_bedrooms_combined["Number of Bedrooms"].apply(lambda x: int(x))
df_bedrooms_combined = pd.concat([df_studio, df_bedrooms_combined], axis = 0).reset_index(drop = True)
df_bedrooms_combined
```
```{python}
df_bathrooms_count = df_unique[["bathrooms", "link"]].groupby("bathrooms", as_index= False).count().sort_values(["bathrooms"])
df_bathrooms_count.columns = ["Number of Bathrooms", "Count"]
df_bathrooms_count
```
```{python}
df_bathrooms_mean_price = df_unique[["bathrooms", "price_pcm"]].groupby("bathrooms", as_index= False).mean().round(2).sort_values(["bathrooms"])
df_bathrooms_mean_price.columns = ["Number of Bathrooms", "Average Price (pcm)"]
df_bathrooms_mean_price
```
```{python}
df_ppbt = df_unique.copy()
df_ppbt["price_per_bathroom"] = (df_ppbt["price_pcm"]/df_ppbt["bathrooms"]).round(2)
df_ppbt = df_ppbt[["bathrooms", "price_per_bathroom"]].groupby("bathrooms", as_index= False).mean().round(2).sort_values(["bathrooms"])
df_ppbt.columns = ["Number of Bathrooms", "Average Price per Bathroom (pcm)"]
df_ppbt
```
```{python}
df_price_bins = df_unique.copy()


bin_width = 250
low_price = df_price_bins['price_pcm'].quantile(0.1)
high_price = df_price_bins['price_pcm'].quantile(0.9)
min_price = df_price_bins['price_pcm'].min()
max_price = df_price_bins['price_pcm'].max()
print("max_price:",max_price)
print("min_price:",min_price)
print("high_price (90th percentile):",high_price)
print("low_price (10th perthentile):",low_price)
bins = [int(min_price)] + list(range(int(low_price), int(high_price) + bin_width, bin_width)) + [int(max_price)]
labels = []
for i in range(len(bins)):
    if i == len(bins) - 2: labels.append(f"£{bins[i]:,}-£{bins[i+1]:,}")
    elif i < len(bins) - 2: labels.append(f"£{bins[i]:,}-£{bins[i+1]-1:,}")
    


df_price_bins['price_bin'] = pd.cut(df_price_bins['price_pcm'], bins=bins, labels=labels)

# Group by bins and count
df_bin_counts = df_price_bins.groupby('price_bin', observed=False).size().reset_index()
df_bin_counts.columns = ["Price Ranges", "Count"]
df_bin_counts
```
```{python}
df_crime = pd.read_excel("../data/Crime Rates.xlsx", "Crime Rates")
df_crime.columns = ["Region Name", "Crime Rate"]
df_crime
```
```{python}
df_crime_price = pd.merge(df_region_mean_price, df_crime, "inner", "Region Name")
df_crime_price
```
```{python}
import matplotlib.pyplot as plt

# Set overall values for look between charts 
bg_color = '#27272a'
font_color = '#d4d4d8'
big_size_font = 20
small_size_font = 14
dpi_choice = 300
font_type_choice = "Arial Black"
legend_color = "#303036"

# Set colors for specific chart
chart_colors = ["#6db19d", "#38bdf8", "#f59e0c", "#f87171", "#9894f9", "#59c334"]

# Create the figure
plt.figure(figsize = (8, 6), facecolor = bg_color, dpi = dpi_choice)
ax = plt.gca()
ax.set_facecolor(bg_color)

# Edit the box spines
ax.spines['bottom'].set_color(font_color)
ax.spines['left'].set_color(font_color)  
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Set ticks
ax.tick_params(axis = 'x', colors = font_color)
ax.tick_params(axis = 'y', colors = font_color)

# Create chart
barh_type_mean_price = ax.barh(df_type_mean_price["Property Type"], df_type_mean_price["Average Price (pcm)"], color = chart_colors)

# Create title
title = plt.title('Average Prices for Most Common Propery Types', font = font_type_choice, weight = "bold", color = font_color)
title.set_fontsize(big_size_font)

# Set axis labels
plt.xlabel('Average Price (pcm)', fontsize = small_size_font, font = font_type_choice, weight = "bold", color = font_color)
plt.ylabel('Property Type', fontsize = small_size_font, font = font_type_choice, weight = "bold", color = font_color)

# Set grid
ax.grid(axis = "x", alpha = 0.3, linestyle = '--', color = font_color)
ax.set_axisbelow(True)

# Give Price look to axis ticks
ax.xaxis.set_major_formatter('£{x:,.0f}')

# Save and display
plt.tight_layout()
plt.savefig('../plots/barh_type_mean_price.png', dpi = dpi_choice, bbox_inches = 'tight')
plt.show()
```
```{python}
# Set colors for specific chart
chart_colors = [ "#f59e0c", "#6db19d", "#59c334", "#38bdf8", "#9894f9", "#f87171"]

# Create the figure
plt.figure(figsize = (8, 6), facecolor = bg_color, dpi = dpi_choice)
ax = plt.gca()
ax.set_facecolor(bg_color)

# Edit the box spines
ax.spines['bottom'].set_color(font_color)
ax.spines['left'].set_color(font_color)  
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Set ticks
ax.tick_params(axis = 'x', colors = font_color)
ax.tick_params(axis = 'y', colors = font_color)

# Create chart
barh_type_count = ax.barh(df_type_count["Property Type"][::-1], df_type_count["Count"][::-1], color = chart_colors)

# Create title
title = plt.title('Number of Properties by Type', font = font_type_choice, weight = "bold", color = font_color)
title.set_fontsize(20)

# Set axis labels
plt.xlabel('Count', fontsize=14, font = font_type_choice, weight = "bold", color = font_color)
plt.ylabel('Property Type', fontsize=14, font = font_type_choice, weight = "bold", color = font_color)

# Set grid
ax.grid(axis = "x", alpha = 0.3, linestyle = '--', color = font_color)
ax.set_axisbelow(True)

# Save and display
plt.tight_layout()
plt.savefig('../plots/barh_type_count.png', dpi = dpi_choice, bbox_inches = 'tight')
plt.show()
```
```{python}
# Create the figure
plt.figure(figsize = (8, 6), facecolor = bg_color, dpi = dpi_choice)
ax = plt.gca()
ax.set_facecolor(bg_color)

# Edit the box spines
ax.spines['bottom'].set_color(font_color)
ax.spines['left'].set_color(font_color)  
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Set ticks
ax.tick_params(axis = 'x', colors = font_color)
ax.tick_params(axis = 'y', colors = font_color)

# Create chart
bar_region_mean_price = ax.bar(df_region_mean_price["Region Name"], df_region_mean_price["Average Price (pcm)"], color = chart_colors)

# Create title
title = plt.title('Average Price by Region', font = font_type_choice, weight = "bold", color = font_color)
title.set_fontsize(20)

# Set axis labels
plt.xlabel('Average Price (pcm)', fontsize=14, font = font_type_choice, weight = "bold", color = font_color)
plt.ylabel('Region Name', fontsize=14, font = font_type_choice, weight = "bold", color = font_color)

# Set grid
ax.grid(axis = "y", alpha = 0.3, linestyle = '--', color = font_color)
ax.set_axisbelow(True)

# Give Price look to axis ticks
ax.yaxis.set_major_formatter('£{x:,.0f}')

# Save and display
plt.tight_layout()
plt.savefig('../plots/bar_region_mean_price.png', dpi = dpi_choice, bbox_inches = 'tight')
plt.show()
```
```{python}
# Create the figure
plt.figure(figsize = (8, 6), facecolor = bg_color, dpi = dpi_choice)
ax = plt.gca()
ax.set_facecolor(bg_color)

# Edit the box spines
ax.spines['bottom'].set_color(font_color)
ax.spines['left'].set_color(font_color)  
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Set ticks
ax.tick_params(axis = 'x', colors = font_color)
ax.tick_params(axis = 'y', colors = font_color)

# Create chart
bar_price_bins = ax.bar(df_bin_counts["Price Ranges"], df_bin_counts["Count"], color = chart_colors[1], width = 0.9)

# Create title
title = plt.title('Price Distribution', font = font_type_choice, weight = "bold", color = font_color)
title.set_fontsize(20)

# Set axis labels
plt.xlabel('Price Ranges (pcm)', fontsize=14, font = font_type_choice, weight = "bold", color = font_color)
plt.ylabel('Count', fontsize=14, font = font_type_choice, weight = "bold", color = font_color)

# Set grid
ax.grid(axis = "y", alpha = 0.3, linestyle = '--', color = font_color)
ax.set_axisbelow(True)

# Give angle to ticks
plt.xticks(rotation = 45, ha = 'right')

# Save and display
plt.tight_layout()
plt.savefig('../plots/hist_price_bins.png', dpi = dpi_choice, bbox_inches = 'tight')
plt.show()
```
```{python}
# Create the figure
plt.figure(figsize = (8, 6), facecolor = bg_color, dpi = dpi_choice)
ax = plt.gca()
ax.set_facecolor(bg_color)

# Edit the box spines
ax.spines['bottom'].set_color(font_color)
ax.spines['left'].set_color(font_color)  
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Set ticks
ax.tick_params(axis = 'x', colors = font_color)
ax.tick_params(axis = 'y', colors = font_color)

# Create chart
for i, row in df_crime_price.iterrows():
    ax.scatter(row["Average Price (pcm)"], row["Crime Rate"], label = row["Region Name"], color = chart_colors[i], s = 250)

# Create title
title = plt.title('Prices and Violent Crime Rates by Regions', font = font_type_choice, weight = "bold", color = font_color)
title.set_fontsize(20)

# Set axis labels
plt.xlabel('Average Price (pcm)', fontsize=14, font = font_type_choice, weight = "bold", color = font_color)
plt.ylabel('Crime Rate', fontsize=14, font = font_type_choice, weight = "bold", color = font_color)

# Set grid
ax.grid(axis = "y", alpha = 0.3, linestyle = '--', color = font_color)
ax.grid(axis = "x", alpha = 0.3, linestyle = '--', color = font_color)
ax.set_axisbelow(True)

# Add legend
legend = ax.legend(title = 'Region Name', frameon = True, markerscale = 0.65)

# Set legend color
legend.get_frame().set_facecolor(legend_color)
legend.get_frame().set_edgecolor(font_color)
legend.get_frame().set_linewidth(1.5)

# Set legend text
for text in legend.get_texts():
    text.set_color(font_color)
    text.set_font(font_type_choice)
    text.set_ha("left")

# Set legend title
legend.get_title().set_color(font_color)
legend.get_title().set_font(font_type_choice)
legend.get_title().set_weight("bold")

# Give Price look to axis ticks
ax.xaxis.set_major_formatter('£{x:,.0f}')

# Save and display
plt.tight_layout()
plt.savefig('../plots/scatt_crime_price.png', dpi = dpi_choice, bbox_inches = 'tight')
plt.show()
```
```{python}
# Create the figure
plt.figure(figsize = (8, 6), facecolor = bg_color, dpi = dpi_choice)
ax = plt.gca()
ax.set_facecolor(bg_color)

# Edit the box spines
ax.spines['bottom'].set_color(font_color)
ax.spines['left'].set_color(font_color)  
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Set ticks
ax.tick_params(axis = 'x', colors = font_color)
ax.tick_params(axis = 'y', colors = font_color)

y_pos = range(len(df_bedrooms_combined))

# Create chart
ax.barh(y_pos, df_bedrooms_combined["Average Price (pcm)"], color = "#4f2c30", label = "Average Price (pcm)")
ax.barh(y_pos, df_bedrooms_combined["Average Price per Bedroom (pcm)"], color = chart_colors[5], label = "Average Price per Bedroom (pcm)")

ax.set_yticks(y_pos)
ax.set_yticklabels(df_bedrooms_combined["Number of Bedrooms"])

# Create title
title = plt.title('Prices by Number of Bedrooms', font = font_type_choice, weight = "bold", color = font_color)
title.set_fontsize(20)

# Set axis labels
plt.ylabel('Number of Bedrooms', fontsize=14, font = font_type_choice, weight = "bold", color = font_color)

# Set grid
ax.grid(axis = "x", alpha = 0.3, linestyle = '--', color = font_color)
ax.set_axisbelow(True)

# Add legend
legend = ax.legend(title = 'Region Name', frameon = True, markerscale = 0.65)

# Set legend color
legend.get_frame().set_facecolor(legend_color)
legend.get_frame().set_edgecolor(font_color)
legend.get_frame().set_linewidth(1.5)

# Set legend text
for text in legend.get_texts():
    text.set_color(font_color)
    text.set_font(font_type_choice)
    text.set_ha("left")

# Set legend title
legend.get_title().set_color(font_color)
legend.get_title().set_font(font_type_choice)
legend.get_title().set_weight("bold")

# Give Price look to axis ticks
ax.xaxis.set_major_formatter('£{x:,.0f}')

# Save and display
plt.tight_layout()
plt.savefig('../plots/barh_bedrooms_combined.png', dpi = dpi_choice, bbox_inches = 'tight')
plt.show()
```